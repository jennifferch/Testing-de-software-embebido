/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_NVRAM_H
#define _MOCK_NVRAM_H

#include "nvram.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_nvram_Init(void);
void mock_nvram_Destroy(void);
void mock_nvram_Verify(void);




#define nvram_init_IgnoreAndReturn(cmock_retval) nvram_init_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void nvram_init_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define nvram_init_ExpectAndReturn(cmock_retval) nvram_init_CMockExpectAndReturn(__LINE__, cmock_retval)
void nvram_init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
typedef int (* CMOCK_nvram_init_CALLBACK)(int cmock_num_calls);
void nvram_init_StubWithCallback(CMOCK_nvram_init_CALLBACK Callback);
#define nvram_read_IgnoreAndReturn(cmock_retval) nvram_read_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void nvram_read_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define nvram_read_ExpectAndReturn(addr, data, len, cmock_retval) nvram_read_CMockExpectAndReturn(__LINE__, addr, data, len, cmock_retval)
void nvram_read_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t addr, void* data, uint32_t len, int cmock_to_return);
typedef int (* CMOCK_nvram_read_CALLBACK)(uint32_t addr, void* data, uint32_t len, int cmock_num_calls);
void nvram_read_StubWithCallback(CMOCK_nvram_read_CALLBACK Callback);
#define nvram_write_IgnoreAndReturn(cmock_retval) nvram_write_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void nvram_write_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define nvram_write_ExpectAndReturn(addr, data, len, cmock_retval) nvram_write_CMockExpectAndReturn(__LINE__, addr, data, len, cmock_retval)
void nvram_write_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t addr, const void* data, uint32_t len, int cmock_to_return);
typedef int (* CMOCK_nvram_write_CALLBACK)(uint32_t addr, const void* data, uint32_t len, int cmock_num_calls);
void nvram_write_StubWithCallback(CMOCK_nvram_write_CALLBACK Callback);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
